services:
  # FRONTEND (estable)
  app_stable:
    image: ghcr.io/ariasbenraq/checkin-report:${IMAGE_TAG_STABLE}
    container_name: checkin-report-stable
    restart: unless-stopped
    ports:
      - "${HOST_PORT_STABLE}:80"      # 8080 ya en uso (OK, es tu estable)
    depends_on:
      api_stable:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost/ || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks: [app-net]

  # BACKEND (estable) — sin puertos publicados al host
  api_stable:
    image: ghcr.io/ariasbenraq/backend-checkin-report:${API_IMAGE_TAG_STABLE}
    container_name: backend-checkin-report-stable
    restart: unless-stopped
    expose:
      - "3000"                      # visible solo dentro de la red de Docker
    environment:
    - NODE_ENV=production
    - PORT=3000
    - DB_HOST=pg16
    - DB_PORT=5432
    - DB_USER=admin
    - DB_PASS=CambiaEstaClaveFuerte123!
    - DB_NAME=logisticacdv

    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks: [app-net]

  # FRONTEND (canary) — si lo usas en 8083
  app_canary:
    image: ghcr.io/ariasbenraq/checkin-report:${IMAGE_TAG_CANARY}
    container_name: checkin-report-canary
    restart: unless-stopped
    ports:
      - "${HOST_PORT_CANARY}:80"     # 8083 ya lo estás usando
    depends_on:
      api_stable:
        condition: service_healthy   # por ahora canary usa la API estable
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost/ || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks: [app-net]

networks:
  app-net:
    driver: bridge
